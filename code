import tkinter as tk from tkinter import ttk 
from tkinter 
import messagebox as mess
import tkinter.simpledialog as tsd import cv2,os 
import csv 
import numpy as np from PIL 
import Image import pandas as pd 
import datetime import time 
 
FUNCTIONS 
 
def assure_path_exists(path):     
dir = os.path.dirname(path)    
if not os.path.exists(dir): 
        os.makedirs(dir) def tick(): 
    time_string = time.strftime('%H:%M:%S')     
clock.config(text=time_string)     
clock.after(200,tick) def contact():     
mess._show(title='Contact 	us', 	
message="Please 	contact 	us 	on 	: 
‘21102117@rmd.ac.in’ ") 
 
def check_haarcascadefile(): 
    exists = os.path.isfile("haarcascade_frontalface_default.xml")     
if exists:         
pass    
else: 
        mess._show(title='Some file missing', message='Please contact us for help')         
window.destroy() 
 
def save_pass(): 
    assure_path_exists("TrainingImageLabel/")     exists1 = os.path.isfile("TrainingImageLabel\psd.txt")     if exists1: 
        tf = open("TrainingImageLabel\psd.txt", "r")         key = tf.read()     else: 
    assure_path_exists("TrainingImageLabel/")     recognizer = cv2.face_LBPHFaceRecognizer.create()     harcascadePath = "haarcascade_frontalface_default.xml"     detector = cv2.CascadeClassifier(harcascadePath)     faces, ID = getImagesAndLabels("TrainingImage")     try:         recognizer.train(faces, np.array(ID))     except: 
        mess._show(title='No Registrations', message='Please Register someone first!!!')         return 
    recognizer.save("TrainingImageLabel\Trainner.yml")     res = "Profile Saved Successfully"     message1.configure(text=res) 
    message.configure(text='Total Registrations till now  : ' + str(ID[0])) def getImagesAndLabels(path): 
    # get the path of all the files in the folder 
    imagePaths = [os.path.join(path, f) for f in os.listdir(path)] 
    # create empth face list     faces = [] 
    # create empty ID list 
    Ids = [] 
    # now looping through all the image paths and loading the Ids and the images     for imagePath in imagePaths: 
        # loading the image and converting it to gray scale         pilImage = Image.open(imagePath).convert('L')         # Now we are converting the PIL image into numpy array         imageNp = np.array(pilImage, 'uint8') 
        # getting the Id from the image 
        ID = int(os.path.split(imagePath)[-1].split(".")[1])         # extract the face from the training image sample         faces.append(imageNp)         Ids.append(ID)     return faces, Ids 
clearButton = tk.Button(frame2, text="Clear", command=clear  ,fg="black"  ,bg="#ea2a2a"  ,width=11 ,activebackground = "white" ,font=('times', 11, ' bold ')) clearButton.place(x=335, y=86) 
clearButton2 = tk.Button(frame2, text="Clear", command=clear2  ,fg="black"  ,bg="#ea2a2a"  ,width=11 , activebackground = "white" ,font=('times', 11, ' bold ')) clearButton2.place(x=335, y=172)     
	takeImg 	= 	tk.Button(frame2, 	text="Take 	Images", 	command=TakeImages  
,fg="white"  ,bg="blue"  ,width=34  ,height=1, activebackground = "white" 
,font=('times', 15, ' bold ')) takeImg.place(x=30, y=300) 
trainImg = tk.Button(frame2, text="Save Profile", command=psw ,fg="white"  ,bg="blue"  ,width=34  ,height=1, activebackground = "white" ,font=('times', 15, ' bold ')) 
trainImg.place(x=30, y=380) 
trackImg = tk.Button(frame1, text="Take Attendance", command=TrackImages  
,fg="black"  ,bg="yellow"  ,width=35  ,height=1, activebackground = "white" 
,font=('times', 15, ' bold ')) trackImg.place(x=30,y=50) 
	quitWindow 	= 	tk.Button(frame1, 	text="Quit", 	command=window.destroy  
,fg="black"  ,bg="red"  ,width=35 ,height=1, activebackground = "white" 
,font=('times', 15, ' bold ')) 
quitWindow.place(x=30, y=450) 
 
window.configure(menu=menubar) 
 
